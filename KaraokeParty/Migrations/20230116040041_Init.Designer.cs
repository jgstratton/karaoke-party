// <auto-generated />
using System;
using KaraokeParty.DataStore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KaraokeParty.Migrations
{
    [DbContext(typeof(KPContext))]
    [Migration("20230116040041_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KaraokeParty.DataStore.Party", b =>
                {
                    b.Property<int>("PartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("party_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PartyId"));

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time_created");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_expired");

                    b.Property<string>("PartyKey")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("party_key");

                    b.Property<int>("PlayerState")
                        .HasColumnType("integer")
                        .HasColumnName("player_state");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("title");

                    b.HasKey("PartyId")
                        .HasName("pk_parties");

                    b.ToTable("parties", (string)null);
                });

            modelBuilder.Entity("KaraokeParty.DataStore.Performance", b =>
                {
                    b.Property<int>("PerformanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("performance_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PerformanceID"));

                    b.Property<int?>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int?>("PartyId")
                        .HasColumnType("integer")
                        .HasColumnName("party_id");

                    b.Property<int?>("SingerId")
                        .HasColumnType("integer")
                        .HasColumnName("singer_id");

                    b.Property<string>("SongFileName")
                        .HasColumnType("text")
                        .HasColumnName("song_file_name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("PerformanceID")
                        .HasName("pk_performances");

                    b.HasIndex("PartyId")
                        .HasDatabaseName("ix_performances_party_id");

                    b.HasIndex("SingerId")
                        .HasDatabaseName("ix_performances_singer_id");

                    b.HasIndex("SongFileName")
                        .HasDatabaseName("ix_performances_song_file_name");

                    b.ToTable("performances", (string)null);
                });

            modelBuilder.Entity("KaraokeParty.DataStore.Singer", b =>
                {
                    b.Property<int>("SingerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("singer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SingerId"));

                    b.Property<bool>("IsDj")
                        .HasColumnType("boolean")
                        .HasColumnName("is_dj");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int?>("PartyId")
                        .HasColumnType("integer")
                        .HasColumnName("party_id");

                    b.HasKey("SingerId")
                        .HasName("pk_singers");

                    b.HasIndex("PartyId")
                        .HasDatabaseName("ix_singers_party_id");

                    b.ToTable("singers", (string)null);
                });

            modelBuilder.Entity("KaraokeParty.DataStore.Song", b =>
                {
                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("FileName")
                        .HasName("pk_songs");

                    b.ToTable("songs", (string)null);
                });

            modelBuilder.Entity("KaraokeParty.DataStore.Performance", b =>
                {
                    b.HasOne("KaraokeParty.DataStore.Party", "Party")
                        .WithMany("Queue")
                        .HasForeignKey("PartyId")
                        .HasConstraintName("fk_performances_parties_party_id");

                    b.HasOne("KaraokeParty.DataStore.Singer", "Singer")
                        .WithMany()
                        .HasForeignKey("SingerId")
                        .HasConstraintName("fk_performances_singers_singer_id");

                    b.HasOne("KaraokeParty.DataStore.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongFileName")
                        .HasConstraintName("fk_performances_songs_song_temp_id");

                    b.Navigation("Party");

                    b.Navigation("Singer");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("KaraokeParty.DataStore.Singer", b =>
                {
                    b.HasOne("KaraokeParty.DataStore.Party", null)
                        .WithMany("Singers")
                        .HasForeignKey("PartyId")
                        .HasConstraintName("fk_singers_parties_party_id");
                });

            modelBuilder.Entity("KaraokeParty.DataStore.Party", b =>
                {
                    b.Navigation("Queue");

                    b.Navigation("Singers");
                });
#pragma warning restore 612, 618
        }
    }
}
